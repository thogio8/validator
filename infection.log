Escaped mutants:
================

1) /var/www/html/src/Core/Validator.php:75    [M] Break_

--- Original
+++ New
@@ @@
             foreach ($fieldRules as $ruleName => $parameters) {
                 if ($ruleName === 'nullable') {
                     $isNullable = true;
-                    break;
+                    continue;
                 }
             }
             // Si le champ est nullable et que la valeur est null, passer à la validation suivante


2) /var/www/html/src/Core/Validator.php:84    [M] Continue_

--- Original
+++ New
@@ @@
             if ($isNullable && $value === null) {
                 $result->addValidatedField($field);
                 $result->addValidData($field, $value);
-                continue;
+                break;
             }
             // Appliquer toutes les règles au champ
             $fieldValid = true;


3) /var/www/html/src/Core/Validator.php:110    [M] FalseValue

--- Original
+++ New
@@ @@
                     $message = $messages[$messageKey] ?? $messages[$field] ?? $messages[$ruleName] ?? $rule->getMessage();
                     $message = str_replace(':attribute', $field, $message);
                     $result->addError($field, $message);
-                    $fieldValid = false;
+                    $fieldValid = true;
                     break;
                 }
             }


4) /var/www/html/src/Core/Validator.php:116    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     break;
                 }
             }
-            $result->addValidatedField($field);
+            
             if ($fieldValid) {
                 $result->addValidData($field, $value);
             }


5) /var/www/html/src/Core/Validator.php:127    [M] InstanceOf_

--- Original
+++ New
@@ @@
     }
     public function addRule(string $name, $rule) : self
     {
-        if (is_callable($rule) && !$rule instanceof RuleInterface) {
+        if (is_callable($rule) && !false) {
             $rule = new CallableRule($rule, $name);
         }
         $this->rules[$name] = $rule;


6) /var/www/html/src/Core/Validator.php:127    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function addRule(string $name, $rule) : self
     {
-        if (is_callable($rule) && !$rule instanceof RuleInterface) {
+        if (is_callable($rule) || !$rule instanceof RuleInterface) {
             $rule = new CallableRule($rule, $name);
         }
         $this->rules[$name] = $rule;


7) /var/www/html/src/Core/Validator.php:179    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $result = [];
         $rules = explode('|', $rulesString);
         foreach ($rules as $rule) {
-            $parts = explode(':', $rule, 2);
+            $parts = explode(':', $rule, 3);
             $ruleName = $parts[0];
             $parameters = [];
             if (isset($parts[1])) {


8) /var/www/html/src/Core/Validator.php:192    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $paramsString = $parts[1];
                 for ($i = 0; $i < strlen($paramsString); $i++) {
                     $char = $paramsString[$i];
-                    if ($char === '"' && ($i === 0 || $paramsString[$i - 1] !== '\\')) {
+                    if ($char === '"' && ($i === -1 || $paramsString[$i - 1] !== '\\')) {
                         $inQuotes = !$inQuotes;
                     } elseif ($char === ',' && !$inQuotes) {
                         $parameters[] = $currentParam;


9) /var/www/html/src/Core/Validator.php:192    [M] Identical

--- Original
+++ New
@@ @@
                 $paramsString = $parts[1];
                 for ($i = 0; $i < strlen($paramsString); $i++) {
                     $char = $paramsString[$i];
-                    if ($char === '"' && ($i === 0 || $paramsString[$i - 1] !== '\\')) {
+                    if ($char === '"' && ($i !== 0 || $paramsString[$i - 1] !== '\\')) {
                         $inQuotes = !$inQuotes;
                     } elseif ($char === ',' && !$inQuotes) {
                         $parameters[] = $currentParam;


10) /var/www/html/src/Core/Validator.php:192    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $paramsString = $parts[1];
                 for ($i = 0; $i < strlen($paramsString); $i++) {
                     $char = $paramsString[$i];
-                    if ($char === '"' && ($i === 0 || $paramsString[$i - 1] !== '\\')) {
+                    if ($char === '"' && ($i === 0 || $paramsString[$i - 0] !== '\\')) {
                         $inQuotes = !$inQuotes;
                     } elseif ($char === ',' && !$inQuotes) {
                         $parameters[] = $currentParam;


11) /var/www/html/src/Core/Validator.php:192    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $paramsString = $parts[1];
                 for ($i = 0; $i < strlen($paramsString); $i++) {
                     $char = $paramsString[$i];
-                    if ($char === '"' && ($i === 0 || $paramsString[$i - 1] !== '\\')) {
+                    if ($char === '"' && ($i === 0 || $paramsString[$i - 2] !== '\\')) {
                         $inQuotes = !$inQuotes;
                     } elseif ($char === ',' && !$inQuotes) {
                         $parameters[] = $currentParam;


12) /var/www/html/src/Rules/CallableRule.php:16    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private string $ruleName;
     public function __construct(callable $callable, string $name)
     {
-        parent::__construct();
+        
         $this->callable = $callable;
         $this->ruleName = $name;
         $this->message = 'Le champ :attribute a échoué à la validation.';


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================

1) /var/www/html/src/Core/CompiledRules.php:55    [M] Coalesce

--- Original
+++ New
@@ @@
     }
     public function getRule(string $field) : array
     {
-        return $this->compiledRules[$field] ?? [];
+        return [] ?? $this->compiledRules[$field];
     }
 }


2) /var/www/html/src/Core/ValidationResult.php:63    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function hasError(string $field) : bool
     {
-        return isset($this->errors[$field]) && !empty($this->errors[$field]);
+        return isset($this->errors[$field]) && empty($this->errors[$field]);
     }
     public function getFieldErrors(string $field) : array
     {


3) /var/www/html/src/Core/ValidationResult.php:63    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function hasError(string $field) : bool
     {
-        return isset($this->errors[$field]) && !empty($this->errors[$field]);
+        return isset($this->errors[$field]) || !empty($this->errors[$field]);
     }
     public function getFieldErrors(string $field) : array
     {


4) /var/www/html/src/Core/Validator.php:47    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             // Fusionner les règles du contexte avec celles fournies
             if (is_array($rules)) {
                 $contextRules = $this->context->getRules();
-                $rules = array_merge($contextRules, $rules);
+                $rules = $contextRules;
             }
             // Fusionner les messages d'erreur personnalisés
             $contextMessages = $this->context->getMessages();


5) /var/www/html/src/Core/Validator.php:47    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             // Fusionner les règles du contexte avec celles fournies
             if (is_array($rules)) {
                 $contextRules = $this->context->getRules();
-                $rules = array_merge($contextRules, $rules);
+                $rules = $rules;
             }
             // Fusionner les messages d'erreur personnalisés
             $contextMessages = $this->context->getMessages();


6) /var/www/html/src/Core/Validator.php:52    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             }
             // Fusionner les messages d'erreur personnalisés
             $contextMessages = $this->context->getMessages();
-            $messages = array_merge($contextMessages, $messages);
+            $messages = $contextMessages;
             // Ajouter des attributs de contexte aux données si nécessaire
             $contextAttributes = $this->context->getAttributes();
             foreach ($contextAttributes as $key => $value) {


7) /var/www/html/src/Core/Validator.php:52    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
             }
             // Fusionner les messages d'erreur personnalisés
             $contextMessages = $this->context->getMessages();
-            $messages = array_merge($contextMessages, $messages);
+            $messages = $messages;
             // Ajouter des attributs de contexte aux données si nécessaire
             $contextAttributes = $this->context->getAttributes();
             foreach ($contextAttributes as $key => $value) {


8) /var/www/html/src/Core/Validator.php:56    [M] Foreach_

--- Original
+++ New
@@ @@
             $messages = array_merge($contextMessages, $messages);
             // Ajouter des attributs de contexte aux données si nécessaire
             $contextAttributes = $this->context->getAttributes();
-            foreach ($contextAttributes as $key => $value) {
+            foreach (array() as $key => $value) {
                 // Par exemple, ajouter des valeurs par défaut si non présentes
                 if (!isset($data[$key])) {
                     $data[$key] = $value;


9) /var/www/html/src/Core/Validator.php:58    [M] LogicalNot

--- Original
+++ New
@@ @@
             $contextAttributes = $this->context->getAttributes();
             foreach ($contextAttributes as $key => $value) {
                 // Par exemple, ajouter des valeurs par défaut si non présentes
-                if (!isset($data[$key])) {
+                if (isset($data[$key])) {
                     $data[$key] = $value;
                 }
             }


10) /var/www/html/src/Core/Validator.php:92    [M] Continue_

--- Original
+++ New
@@ @@
             foreach ($fieldRules as $ruleName => $parameters) {
                 // Ignorer la règle nullable lors de l'application des règles
                 if ($ruleName === 'nullable') {
-                    continue;
+                    break;
                 }
                 $rule = $this->getRule($ruleName);
                 if ($rule === null) {


11) /var/www/html/src/Core/Validator.php:97    [M] Continue_

--- Original
+++ New
@@ @@
                 }
                 $rule = $this->getRule($ruleName);
                 if ($rule === null) {
-                    continue;
+                    break;
                 }
                 // Appliquer la règle
                 if (!$rule->validate($value, $parameters, $data)) {


12) /var/www/html/src/Core/Validator.php:162    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $rulesArray = $this->parseRuleString($fieldRules);
                 $compiled->addField($field, $rulesArray);
             } elseif (is_array($fieldRules)) {
-                $compiled->addField($field, $fieldRules);
+                
             }
         }
         return $compiled;


13) /var/www/html/src/Core/Validator.php:215    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function extend(string $name, callable|string $extension) : self
     {
-        if (is_string($extension) && class_exists($extension)) {
+        if (is_string($extension) || class_exists($extension)) {
             // Si c'est un nom de classe, l'instancier
             $extension = new $extension();
         }


14) /var/www/html/src/Core/Validator.php:220    [M] InstanceOf_

--- Original
+++ New
@@ @@
             // Si c'est un nom de classe, l'instancier
             $extension = new $extension();
         }
-        if ($extension instanceof RuleInterface) {
+        if (true) {
             // Si c'est une instance de RuleInterface, l'ajouter directement
             $this->addRule($name, $extension);
         } elseif (is_callable($extension)) {


15) /var/www/html/src/Core/Validator.php:220    [M] InstanceOf_

--- Original
+++ New
@@ @@
             // Si c'est un nom de classe, l'instancier
             $extension = new $extension();
         }
-        if ($extension instanceof RuleInterface) {
+        if (false) {
             // Si c'est une instance de RuleInterface, l'ajouter directement
             $this->addRule($name, $extension);
         } elseif (is_callable($extension)) {


16) /var/www/html/src/Core/Validator.php:222    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $extension = new $extension();
         }
         if ($extension instanceof RuleInterface) {
-            // Si c'est une instance de RuleInterface, l'ajouter directement
-            $this->addRule($name, $extension);
+            
         } elseif (is_callable($extension)) {
             // Si c'est un callable, créer une règle basée sur une fonction
             $this->addRule($name, new CallableRule($extension, $name));


17) /var/www/html/src/Core/Validator.php:225    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             // Si c'est une instance de RuleInterface, l'ajouter directement
             $this->addRule($name, $extension);
         } elseif (is_callable($extension)) {
-            // Si c'est un callable, créer une règle basée sur une fonction
-            $this->addRule($name, new CallableRule($extension, $name));
+            
         }
         return $this;
     }
